# Copyright 2025 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = find-my-nino-add-to-wallet

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "config.HmrcModule"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300
}

# Microservice specific config

auditing {
  enabled = true
  consumer {
    baseUri {
      port = 7300
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/find-my-nino-add-to-wallet"
  timeToLiveInSeconds = 900
  encryption {
    enabled = true
    key = "z4rWoRLf7a1OHTXLutSDJjhrUzZTBE3b" # random key only to be used locally as specific format is required for encryption
  }
}

microservice {
  services {
    auth {
      host = localhost
      port = 8500
    }

    nps-crn-api {
          protocol = "http"
          host = "localhost"
          port = 14011
          token = "dummy"
          correlationId.key = "correlationId"
          govUkOriginatorId.key = "gov-uk-originator-id"
          govUkOriginatorId.value = "dummy"
        }

    internal-auth {
      resource-type = "ddcn-live-admin-frontend"
      host = localhost
      port = 8470
    }

    fandf {
      protocol = http
      host = localhost
      port = 9333
    }
  }
}

external-url {

  individual-details {
    host = "localhost"
    port = "14011"
    protocol = "http"
    auth-token = "Bearer 1234567890"
    environment = "ist0"
    originator-id = "originatorId"
  }

}


frontendServiceUrl = "http://localhost:14006/save-your-national-insurance-number"

applePass {
  appleWWDRCA = "DUMMY_CERTIFICATE"                                 # Dummy Certificate
  appleWWDRCA = ${?PUBLIC_CERTIFICATE}                              # Real certificate must be put to your environment variable
  privateCertificate = "DUMMY_CERTIFICATE"                          # Dummy Certificate
  privateCertificate = ${?PRIVATE_CERTIFICATE}                      # Real certificate must be put to your environment variable
  privateCertificatePassword = "DUMMY_KEY"                          # Dummy Password
  privateCertificatePassword = ${?PRIVATE_CERTIFICATE_PASSWORD}     # Real password of the certificate must be put to your environment variable

  appleWWDRCA2 = "DUMMY_CERTIFICATE"                                 # Dummy Certificate
  appleWWDRCA2 = ${?PUBLIC_CERTIFICATE}                              # Real certificate must be put to your environment variable
  privateCertificate2 = "DUMMY_CERTIFICATE"                          # Dummy Certificate
  privateCertificate2 = ${?PRIVATE_CERTIFICATE}                      # Real certificate must be put to your environment variable
  privateCertificatePassword2 = "DUMMY_KEY"                          # Dummy Password
  privateCertificatePassword2 = ${?PRIVATE_CERTIFICATE_PASSWORD}     # Real password of the certificate must be put to your environment variable
}

googlePass {
    issuerId = "DUMMY_ISSUER_ID"
    issuerId = ${?GOOGLE_PASS_ISSUER_ID}
    key = "DUMMY_KEY"
    key = ${?GOOGLE_PASS_KEY}
    expiry = 10
    url = "https://pay.google.com/gp/v/save/"
    url = ${?GOOGLE_PASS_URL}
    origins = "localhost:14006"
}

# Key for JSON encryption
# ~~~
# Used in persistence of JSON data to MongoDB
json.encryption {
  key = "someLocalEncryptionKey==" # overwritten by platform-specific encryption keys
  previousKeys = []
}

